import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as c,c as t,a as o,b as s}from"./app-DNTRvR-x.js";const a={},n=s(`<p>在 C++ 中，<strong>声明</strong>可以将一个标识符与一个类型或者对象联系起来。</p><p>为了理解声明的作用，这里我们也简要介绍一下类型和对象的概念。</p><h2 id="类型与对象" tabindex="-1"><a class="header-anchor" href="#类型与对象"><span>类型与对象</span></a></h2><p>在 C++ 中，内存的基本单位是<strong>字节</strong>。一个<strong>对象</strong>占据内存中的一块区域，也即多个连续的字节（可能是0个）。</p><p>并且，对象具有一个<strong>类型</strong>。对象的类型决定了对象的值的集合，以及对象上可以进行的操作。</p><p>当我们声明一个对象时，需要指定对象的类型；通过声明，我们创造了这个对象。</p><p>举例而言，在关键字中提到了 <code>int</code>，这个关键字表示的是整数类型。整数类型的对象具有整数值，并具有整数运算的行为。</p><p>假设我们已经有整数类型的对象 <code>a</code>、<code>b</code>和<code>c</code>，我们可以对<code>a</code>、<code>b</code>进行加法运算，然后把结果赋值给 <code>c</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>由于 <code>a</code>、<code>b</code>和<code>c</code>都是整数类型的对象，所以这个计算符合整数加法的规则。例如，如果 <code>a</code> 和 <code>b</code> 的值分别是 <code>1</code> 和 <code>2</code>，那么 <code>c</code> 的被赋予的值将是 <code>3</code>。</p><p>而如果 <code>a</code> 或者 <code>b</code> 不是整数类型，那么这个计算的规则就不一定是整数加法了。</p><div class="hint-container info"><p class="hint-container-title">抽象用语的内存</p><p>在这里，“内存”并不是具体的指个人电脑的内存条提供的RAM存储器，而是一个抽象机的描述用语。例如，在寄存器上的一个字节，对于 C++ 而言也是内存里的一个字节，实现可以根据对象的使用情况编译为需要的具体调度形式。在高等编程语言中，这样的抽象将语言和硬件实现分离，使得语言可以适用于不同的硬件平台，程序员也无需阅读硬件手册来编写程序。</p></div><div class="hint-container info"><p class="hint-container-title">对象与变量</p><p>很多时候，人们会用“变量”来描述类似“对象”的概念。在 C++ 的术语中，变量不一定是对象。<br> 在日常交流环境中，这两个术语是可以互换的。本文为了保持必要的严谨性，会尽量正确使用“对象”和“变量”这两个术语。</p></div><h2 id="简单声明" tabindex="-1"><a class="header-anchor" href="#简单声明"><span>简单声明</span></a></h2><p>在 C++ 中，声明的形式是：<code>类型 标识符;</code> 或者 <code>类型 标识符 初始化器;</code>。不要忘了最后的分号 <code>;</code>，这个分号表示声明的结束。</p><p>初始化器有很多形式，在这一章节中我们只介绍最简单的形式，即 <code>= 字面量</code>。</p><p>举例而言，下面的代码声明了一个整数类型的对象 <code>a</code>：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面这个声明的作用是创造一个整数类型的对象，将标识符 <code>a</code> 与这个对象联系起来。这样，我们就可以使用 <code>a</code> 来表示一个整数类型的对象。</p><p>在声明的同时，我们也可以对对象进行初始化。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个声明的作用是创造一个整数类型的对象，将标识符 <code>b</code> 与这个对象联系起来，并且将 <code>b</code> 初始化为整数值 <code>42</code>。</p><div class="hint-container info"><p class="hint-container-title">用语与惯例</p><p>在这里，技术性来说，<code>int</code> 是一个<strong>标识符</strong>，并且是一个<strong>关键字</strong>。在这里表示某一种特定的整数类型；<code>a</code> 和 <code>b</code> 是<strong>标识符</strong>，这个<strong>标识符</strong>与特定的对象绑定。</p><p>但在现实生活中，人们并不会用如此严格的语言来描述这些概念，不会费劲的说什么“标识符<code>a</code>所绑定的的一个标识符<code>int</code>所代指的类型的对象” 。</p><p>因为 <code>int</code> 就代表这个类型，<code>a</code> 就代表这个对象。所以，这里人们通常直接说 <code>int</code> 类型，<code>a</code> 对象，<code>b</code> 对象，这样的描述在交流中更有效率也更容易理解。</p></div><h2 id="不确定值" tabindex="-1"><a class="header-anchor" href="#不确定值"><span>不确定值</span></a></h2><p>以没有初始化器的形式声明一个对象的时候，对象被<strong>默认初始化</strong>，此时这个对象被初始化为一个不确定的值。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // c 的值是不确定的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个不确定值可能是内存中的垃圾值，也可能是编译器生成的特殊值，没有可以确定的性质（注意：随机性也是一种性质，程序员不能确定这个值具有随机性）。</p><p>如果一个对象的值是不确定的，使用其值会导致错误，例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c;</span></span>
<span class="line highlighted error"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误：c 的值是不确定的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">不确定值、默认初始化与用户自定义类型</p><p>不确定值并不是一个随机值，它没有确定的随机性质。数学的来讲，随机数应当具有一定的熵，而不确定值可以一直是<code>0</code>，并在更换了电脑显示器之后一直是<code>111445</code>。程序员不能确定这个值具有什么性质，因此不能使用这个值。</p><p>默认初始化的规则对于用户自定义类型会有所不同，技术性地说，这里的不确定值规则仅限内置类型的默认初始化。对于更复杂类型的默认初始化，我们会在后面的章节中介绍。</p></div><h2 id="初识类型" tabindex="-1"><a class="header-anchor" href="#初识类型"><span>初识类型</span></a></h2><p>为了方便这一章的理解，以及避免引入过多的概念造成理解困难，这里介绍几种基本的类型。</p><ul><li><code>int</code> 是整数类型，此类型的对象可以存储整数值。例如：<code>42</code>、<code>-42</code> 这样的字面量都是整数值（注意没有后缀），可以用这样的字面量来初始化整数类型的对象。 <ul><li>C++ 规定 <code>int</code> 类型的对象至少占用2个字节。在常见的机器上，<code>int</code> 类型的对象占用4个字节。</li></ul></li><li><code>bool</code> 是布尔类型，此类型对象可以存储逻辑值。例如：<code>true</code>、<code>false</code> 这样的字面量都是布尔值，可以用这样的字面量来初始化布尔类型的对象。 <ul><li>C++ 没有规定 <code>bool</code> 具体占用多少字节。在常见的机器上，<code>bool</code> 类型的对象占用1个字节。</li></ul></li><li><code>char</code> 是字符类型，此类型对象可以存储字符。例如：<code>&#39;a&#39;</code>、<code>&#39;b&#39;</code> 这样的字面量都是字符值，可以用这样的字面量来初始化字符类型的对象。 <ul><li>C++ 规定 <code>char</code> 类型的对象占用1个字节。</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">“整数类型”指什么？</p><p>“整数类型”这一说法有时候也会指代所有具有整数性质的类型，这里提到的 <code>int</code> 、 <code>bool</code> 和 <code>char</code> 都属于具有整数性质的类型。在本节中，为了方便表述，使用“整数类型”这一说法指代 <code>int</code> 类型。而在后面的章节中，则倾向直接使用“ <code>int</code> 类型”这一说法。</p></div><h3 id="初识转换" tabindex="-1"><a class="header-anchor" href="#初识转换"><span>初识转换</span></a></h3><p>当需要的类型和提供的类型不一致时，C++ 会尝试进行一些简单的转换。简单转换不是术语，只是 C++ 的转换规则中的一部分，为了描述需要，这里专门提出来一部分。</p><p>例如，当我们需要一个整数类型的对象，但是提供的是一个字符类型的对象时，C++ 会尝试将字符类型转换为整数类型。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个声明的作用是将标识符 <code>a</code> 与整数类型联系起来，并且将 <code>a</code> 初始化为字符 <code>&#39;a&#39;</code> 以 ASCII 编码对应的整数值（即 <code>97</code>）。</p><table><thead><tr><th>目标类型</th><th>提供类型</th><th>提供的值</th><th>得到的值</th></tr></thead><tbody><tr><td><code>int</code></td><td><code>bool</code></td><td><code>true</code></td><td><code>1</code></td></tr><tr><td><code>int</code></td><td><code>bool</code></td><td><code>false</code></td><td><code>0</code></td></tr><tr><td><code>bool</code></td><td><code>int</code></td><td><code>0</code></td><td><code>false</code></td></tr><tr><td><code>bool</code></td><td><code>int</code></td><td>任意非零值</td><td><code>true</code></td></tr><tr><td><code>bool</code></td><td><code>char</code></td><td><code>\\0</code></td><td><code>false</code></td></tr><tr><td><code>bool</code></td><td><code>char</code></td><td>非<code>\\0</code>值</td><td><code>true</code></td></tr><tr><td><code>char</code></td><td><code>bool</code></td><td><code>true</code></td><td><code>&#39;\\1&#39;</code></td></tr><tr><td><code>char</code></td><td><code>bool</code></td><td><code>false</code></td><td><code>&#39;\\0&#39;</code></td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">int 与 char 的转换</p><p><code>int</code> 与 <code>char</code> 显然有着不同的大小，更小的 <code>char</code> 的值无法与 <code>int</code> 的值产生对应，因此需要一定的规则来进行转换。</p><p>假设 <code>int</code> 的大小是2字节，1字节的比特数是8，那么 <code>int</code> 的值范围是<code>[-2^15, 2^15-1]</code>，也即<code>[-32768, 32767]</code>。此外，再假设 <code>char</code> 是有符号的，那么 <code>char</code> 的值范围是<code>[-2^7, 2^7-1]</code>，也即<code>[-128, 127]</code>。</p><p>C++ 规定，<code>int</code>使用补码表示，因此，<code>int</code>的<code>-1</code> 表示为 <code>0b1111111111111111</code>。</p><p>当从 <code>char</code> 转换到 <code>int</code> 时，<code>char</code> 的值会被扩展到 <code>int</code> 的大小，此时会发生符号扩展。例如，<code>char</code> 的值<code>-1</code>，其比特为<code>0b11111111</code>。会被扩展为<code>int</code> 的值<code>-1</code>（<code>0b1111111111111111</code>），而不是<code>255</code>(<code>0b0000000011111111</code>)。</p><p>当从 <code>int</code> 转换到 <code>char</code> 时，<code>int</code> 的值会被截断到 <code>char</code> 的大小，此时会按照字节宽度取余。例如，<code>int</code> 的值<code>193</code>，其比特为<code>0b0000000110000001</code>。会被截断为<code>char</code> 的值 <code>-63</code>（<code>0b10000001</code>）。</p><p>这里为了方便表述，假设了 <code>int</code> 为2字节，否则在描述比特的时候就会写出过多的0和1。对于常见的4字节 <code>int</code> 的情况，这里的规则是通用的，只是数值范围会有所不同。</p><p>此外，在特定实现中，<code>char</code> 可能是无符号的，这会导致 <code>0b0000000110000001</code> 被截断为 <code>193</code> ，而不是 <code>-63</code>，但比特位上的结果是一样的 <code>0b10000001</code>。</p></div><h2 id="快速练习" tabindex="-1"><a class="header-anchor" href="#快速练习"><span>快速练习</span></a></h2>`,42);function l(h,r){const e=i("Choices");return c(),t("div",null,[n,o(e,{questions:[{text:"下面的声明创建了什么对象？",code:"int example = 'a';",shuffleOptions:!1,options:["int 类型的对象","char 类型的对象","bool 类型的对象","没有创建对象"],answers:["int 类型的对象"]},{text:"下面的声明创建了什么对象？",code:"int nope;",shuffleOptions:!1,options:["int 类型的对象","char 类型的对象","bool 类型的对象","没有创建对象"],answers:["int 类型的对象"]},{text:"下面的声明创建了什么对象？",code:"char test = false;",shuffleOptions:!1,options:["int 类型的对象","char 类型的对象","bool 类型的对象","没有创建对象"],answers:["char 类型的对象"]},{text:"a的值被初始化为什么？",code:"int a = true;",shuffleOptions:!1,options:["1","true","不确定值","无法初始化"],answers:["1"]},{text:"a的值被初始化为什么？",code:"int a = '\\54';",shuffleOptions:!1,options:["54","44","1","不确定值","无法初始化"],answers:["44"]},{text:"a的值被初始化为什么？",code:"char a = false;",shuffleOptions:!1,options:["'0'","'\\0'","不确定值","没有初始化"],answers:["'\\0'"]}]})])}const g=d(a,[["render",l],["__file","declaration.html.vue"]]),b=JSON.parse('{"path":"/zh/02-program-structure/declaration.html","title":"2.1 初识声明，类型与对象","lang":"zh-CN","frontmatter":{"title":"2.1 初识声明，类型与对象"},"headers":[{"level":2,"title":"类型与对象","slug":"类型与对象","link":"#类型与对象","children":[]},{"level":2,"title":"简单声明","slug":"简单声明","link":"#简单声明","children":[]},{"level":2,"title":"不确定值","slug":"不确定值","link":"#不确定值","children":[]},{"level":2,"title":"初识类型","slug":"初识类型","link":"#初识类型","children":[{"level":3,"title":"初识转换","slug":"初识转换","link":"#初识转换","children":[]}]},{"level":2,"title":"快速练习","slug":"快速练习","link":"#快速练习","children":[]}],"git":{"createdTime":1718946845000,"updatedTime":1722109707000,"contributors":[{"name":"dynilath","email":"dynilath@qq.com","commits":13}]},"readingTime":{"minutes":8.61,"words":2584},"filePathRelative":"zh/02-program-structure/declaration.md","localizedDate":"2024年6月21日"}');export{g as comp,b as data};
