import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as a,c as e,a as d,b as n}from"./app-DNTRvR-x.js";const l={},r=n(`<h2 id="标识符" tabindex="-1"><a class="header-anchor" href="#标识符"><span>标识符</span></a></h2><p>在 C++ 中，程序员常常需要自定义的标记来表示一些程序的实体，例如对象、函数、类型等等。程序员赋予程序实体名字，之后在程序的其他部分就可以通过这个名字来引用这个实体。这个名字就是<strong>标识符</strong>。</p><p>标识符是由字母、数字和下划线组成的，其中第一个字符必须是字母或下划线（不能是数字）。标识符是大小写敏感的，也就是说 <code>hello</code> 和 <code>Hello</code> 是两个不同的标识符。</p><p>举例而言，如下面的代码：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import std;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相信读者很容易理解到，<code>a</code> 就是一个标识符，它代表一个整数对象。</p><p>此外，这里的 <code>int</code>、<code>main</code>、<code>std</code>、<code>cout</code>、<code>endl</code>、<code>import</code>、<code>return</code> 都是标识符。它们与程序员自己定义的标识符有所区别，有的是关键字，有的是具有特殊意义的标识符，有的是预定义的标识符，这会在后文做出解释。</p><div class="hint-container info"><p class="hint-container-title">更多标识符</p><p>读者可能已经发现了标识符几乎可以是任何语言的字符，中文字符可以、日文字符也可以，甚至是许多emoji都可以（非人脸的多数emoji）。<br> 技术性地讲，任何标记为 XID_Start 的 Unicode 字符都可以作为标识符的首字符，而任何标记为 XID_Continue 的 Unicode 字符都可以作为标识符的后续字符。</p><p>但是，由于目前世界上的编码标准与运行环境千奇百怪，读者虽然在自己的试验项目中可以如此做，但在实际工程中，我们还是尽量使用英文字符作为标识符。</p></div><h2 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字"><span>关键字</span></a></h2><p>在 C++ 中，有一些特殊的标识符，这些标识符被称为关键字。关键字被保留为特殊用途，不能被程序员使用、命名其它实体。例如，<code>int</code> 是一个关键字，程序员不能将 <code>int</code> 作为对象、函数、类型的名字。</p><p>下面列出了 C++ 中的所有关键字：</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>alignas</td><td>constinit</td><td>false</td><td>public</td><td>true</td></tr><tr><td>alignof</td><td>const_cast</td><td>float</td><td>register</td><td>try</td></tr><tr><td>asm</td><td>continue</td><td>for</td><td>reinterpret_cast</td><td>typedef</td></tr><tr><td>auto</td><td>co_await</td><td>friend</td><td>requires</td><td>typeid</td></tr><tr><td>bool</td><td>co_return</td><td>goto</td><td>return</td><td>typename</td></tr><tr><td>break</td><td>co_yield</td><td>if</td><td>short</td><td>union</td></tr><tr><td>case</td><td>decltype</td><td>inline</td><td>signed</td><td>unsigned</td></tr><tr><td>catch</td><td>default</td><td>int</td><td>sizeof</td><td>using</td></tr><tr><td>char</td><td>delete</td><td>long</td><td>static</td><td>virtual</td></tr><tr><td>char8_t</td><td>do</td><td>mutable</td><td>static_assert</td><td>void</td></tr><tr><td>char16_t</td><td>double</td><td>namespace</td><td>static_cast</td><td>volatile</td></tr><tr><td>char32_t</td><td>dynamic_cast</td><td>new</td><td>struct</td><td>wchar_t</td></tr><tr><td>class</td><td>else</td><td>noexcept</td><td>switch</td><td>while</td></tr><tr><td>concept</td><td>enum</td><td>nullptr</td><td>template</td><td></td></tr><tr><td>const</td><td>explicit</td><td>operator</td><td>this</td><td></td></tr><tr><td>consteval</td><td>export</td><td>private</td><td>thread_local</td><td></td></tr><tr><td>constexpr</td><td>extern</td><td>protected</td><td>throw</td><td></td></tr></tbody></table><h2 id="保留的标识符" tabindex="-1"><a class="header-anchor" href="#保留的标识符"><span>保留的标识符</span></a></h2><p>在 C++ 中，还有一些标识符被保留，不能被程序员使用，命名实体。这些标识符通常是用于库的实现，或者是用于未来的扩展。例如，<code>__reserved</code> 是一个保留的标识符，程序员不能将 <code>__reserved</code> 作为对象、函数、类型的名字。</p><p>具体而言，以 <code>__</code> 开头的标识符都是保留的标识符。以 <code>_</code> 开头，第二个字符是大写字母的标识符也是保留的标识符。全局命名空间中，以一个下划线开始的标识符。都是被保留的。例如，任何位置出现的<code>_Reserved</code>、<code>_M_reserved</code>、<code>__m</code>，在全局命名空间的 <code>_x</code> 都是保留的标识符。</p><p>读者可能会在调试程序中看到标准库的源文件，会发现许多如本节所述的，被称为保留的标识符，名称。例如，下面是 <code>microsoft/STL</code> 中的一段代码：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">... </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_Valty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _CONSTEXPR20 _Ty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _Emplace_one_at_back</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_Valty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">... _Val) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // insert by perfectly forwarding into element at end, provide strong guarantee</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        auto&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _My_data   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _Mypair._Myval2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pointer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _Mylast </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _My_data._Mylast;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (_Mylast </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _My_data._Myend) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _Emplace_back_with_unused_capacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_STD </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forward</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_Valty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(_Val)...);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_Emplace_reallocate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_Mylast, _STD </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forward</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_Valty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(_Val)...);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>_CONSTEXPR20</code>、<code>_Ty</code>、<code>_Emplace_one_at_back</code>、<code>_Valty</code>、<code>_My_data</code> 等等全都都是保留的标识符。</p><p>除了标准规定的一些名称比较好看的函数与类型，标准库本身实现的时候，基本上被限制使用上述的保留标识符。而作为标准库的使用者，<strong>不应当</strong>使用这些标识符，这是一种规范。</p><h2 id="快速练习" tabindex="-1"><a class="header-anchor" href="#快速练习"><span>快速练习</span></a></h2>`,20);function h(p,c){const t=s("Choices");return a(),e("div",null,[r,d(t,{questions:[{text:"下面的代码中，有哪些是标识符？",code:"const int a = 1;",options:["const","int","a","=","1"],answers:["const","int","a"]},{text:"下面的代码中，有哪些是关键字？",code:"const int a = 1;",options:["const","int","a","=","1"],answers:["const","int"]},{text:"下面的代码中，有哪些是标识符？",code:`int plus_one(int a) { 
    return a + 1; 
}`,options:["int","plus_one","a","return","1","+",";"],answers:["plus_one","int","a","return"]},{text:"下面的代码中，有哪些是标识符？",code:`#include <iostream> 
int main() { 
    std::cout << "Hello, World"; 
}`,options:["include","iostream","int","main","std","cout","<<",'"Hello, World"',";"],answers:["int","main","std","cout"]},{text:"下面的代码中，有哪些是关键字？",code:`#include <iostream> 

int main() { 
    std::cout << "Hello, World"; 
}`,options:["include","iostream","int","main","std","cout","<<",'"Hello, World"',";"],answers:["int"]}]},null,8,["questions"])])}const E=i(l,[["render",h],["__file","id-and-keyword.html.vue"]]),g=JSON.parse('{"path":"/zh/01-hello-world/id-and-keyword.html","title":"1.2 标识符与关键字","lang":"zh-CN","frontmatter":{"title":"1.2 标识符与关键字"},"headers":[{"level":2,"title":"标识符","slug":"标识符","link":"#标识符","children":[]},{"level":2,"title":"关键字","slug":"关键字","link":"#关键字","children":[]},{"level":2,"title":"保留的标识符","slug":"保留的标识符","link":"#保留的标识符","children":[]},{"level":2,"title":"快速练习","slug":"快速练习","link":"#快速练习","children":[]}],"git":{"createdTime":1712499776000,"updatedTime":1722113594000,"contributors":[{"name":"dynilath","email":"dynilath@qq.com","commits":5}]},"readingTime":{"minutes":3.94,"words":1182},"filePathRelative":"zh/01-hello-world/id-and-keyword.md","localizedDate":"2024年4月7日"}');export{E as comp,g as data};
