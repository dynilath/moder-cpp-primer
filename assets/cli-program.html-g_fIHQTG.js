import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as k,o as p,c as r,a as t,w as a,d as i,b as h,e as s}from"./app-DNTRvR-x.js";const c={},g=i("p",null,"控制台是在如今的计算机上最常见最基础的程序运行形式，它是一种基于文本的用户界面。",-1),u=i("p",null,"在控制台程序中，用户通过键盘输入命令，程序通过控制台输出结果。这种形式虽然古老而基础，但是在许多场景下仍然有着广泛的甚至不可替代的应用。",-1),E=i("h2",{id:"控制台操作概述",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#控制台操作概述"},[i("span",null,"控制台操作概述")])],-1),o=i("p",null,"打开控制台，应该会看到如下的提示：",-1),v=i("div",{class:"language-powershell line-numbers-mode","data-highlighter":"shiki","data-ext":"powershell","data-title":"powershell",style:{"--shiki-light":"#24292e","--shiki-dark":"#e1e4e8","--shiki-light-bg":"#fff","--shiki-dark-bg":"#24292e"}},[i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"PS C:\\Users\\admin"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},">")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1),y=i("div",{class:"language-cmd line-numbers-mode","data-highlighter":"shiki","data-ext":"cmd","data-title":"cmd",style:{"--shiki-light":"#24292e","--shiki-dark":"#e1e4e8","--shiki-light-bg":"#fff","--shiki-dark-bg":"#24292e"}},[i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"C:\\Users\\admin"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},">")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1),b=i("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"--shiki-light":"#24292e","--shiki-dark":"#e1e4e8","--shiki-light-bg":"#fff","--shiki-dark-bg":"#24292e"}},[i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"admin@Computer:"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ~"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," $")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1),m=i("p",null,"这样的提示表示现在的控制台正在等待用户输入命令。用户可以在这里输入命令，然后按下回车键，控制台会执行用户输入的命令。",-1),F=i("p",null,"在输入光标左边，通常会展示当前的工作路径。",-1),A=i("p",null,"先快速地学习一下，控制台中的一些常见命令：",-1),f=i("table",null,[i("thead",null,[i("tr",null,[i("th",null,"命令"),i("th",null,"使用方式"),i("th",null,"功能")])]),i("tbody",null,[i("tr",null,[i("td",null,[i("code",null,"cd")]),i("td",null,[i("code",null,"cd <目录路径>")]),i("td",null,[s("切换工作路径到 "),i("code",null,"<目录路径>"),s(" 的位置")])]),i("tr",null,[i("td",null,[i("code",null,"ls")]),i("td",null,[i("code",null,"ls")]),i("td",null,"列出当前目录下的文件和文件夹")]),i("tr",null,[i("td",null,[i("code",null,"pwd")]),i("td",null,[i("code",null,"pwd")]),i("td",null,"显示当前工作路径")]),i("tr",null,[i("td",null,[i("code",null,"cat")]),i("td",null,[i("code",null,"cat <文件路径>")]),i("td",null,"显示文件内容")]),i("tr",null,[i("td",null,[i("code",null,"Get-Command")]),i("td",null,[i("code",null,"Get-Command <命令>")]),i("td",null,"显示命令的路径")])])],-1),C=i("table",null,[i("thead",null,[i("tr",null,[i("th",null,"命令"),i("th",null,"使用方式"),i("th",null,"功能")])]),i("tbody",null,[i("tr",null,[i("td",null,[i("code",null,"cd")]),i("td",null,[i("code",null,"cd <目录路径>")]),i("td",null,[s("切换工作路径到 "),i("code",null,"<目录路径>"),s(" 的位置")])]),i("tr",null,[i("td",null,[i("code",null,"dir")]),i("td",null,[i("code",null,"dir")]),i("td",null,"列出当前目录下的文件和文件夹")]),i("tr",null,[i("td",null,[i("code",null,"cd")]),i("td",null,[i("code",null,"cd")]),i("td",null,"显示当前工作路径")]),i("tr",null,[i("td",null,[i("code",null,"type")]),i("td",null,[i("code",null,"type <文件路径>")]),i("td",null,"显示文件内容")]),i("tr",null,[i("td",null,[i("code",null,"where")]),i("td",null,[i("code",null,"where <命令>")]),i("td",null,"显示命令的路径")])])],-1),_=i("table",null,[i("thead",null,[i("tr",null,[i("th",null,"命令"),i("th",null,"使用方式"),i("th",null,"功能")])]),i("tbody",null,[i("tr",null,[i("td",null,[i("code",null,"cd")]),i("td",null,[i("code",null,"cd <目录路径>")]),i("td",null,[s("切换工作路径到 "),i("code",null,"<目录路径>"),s(" 的位置")])]),i("tr",null,[i("td",null,[i("code",null,"ls")]),i("td",null,[i("code",null,"ls")]),i("td",null,"列出当前目录下的文件和文件夹")]),i("tr",null,[i("td",null,[i("code",null,"pwd")]),i("td",null,[i("code",null,"pwd")]),i("td",null,"显示当前工作路径")]),i("tr",null,[i("td",null,[i("code",null,"cat")]),i("td",null,[i("code",null,"cat <文件路径>")]),i("td",null,"显示文件内容")]),i("tr",null,[i("td",null,[i("code",null,"which")]),i("td",null,[i("code",null,"which <命令>")]),i("td",null,"显示命令的路径")])])],-1),D=i("p",null,"这里认为读者正在操作一个视窗系统，所以创建/删除/编辑文件等操作在这里不会展示，使用视窗系统的文件管理器显然更加高效直接。",-1),B=i("p",null,"本书的目的是教授 C++ 语言，而不是操作系统的使用。如果读者对操作系统的使用有兴趣，可以参考其他的书籍或者教程。",-1),x=i("p",null,"接下来，使用显示命令的路径的指令看看编译器的路径。",-1),w=i("div",{class:"language-powershell line-numbers-mode","data-highlighter":"shiki","data-ext":"powershell","data-title":"powershell",style:{"--shiki-light":"#24292e","--shiki-dark":"#e1e4e8","--shiki-light-bg":"#fff","--shiki-dark-bg":"#24292e"}},[i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"Get-Command"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," g"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"++")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1),q=i("p",null,[s("如果看到 "),i("code",null,"无法将“g++”项识别为 cmdlet、函数..."),s("，说明编译器没有安装或者没有配置好环境变量。请参考第一章的内容，安装并配置好编译器。")],-1),T=i("div",{class:"language-cmd line-numbers-mode","data-highlighter":"shiki","data-ext":"cmd","data-title":"cmd",style:{"--shiki-light":"#24292e","--shiki-dark":"#e1e4e8","--shiki-light-bg":"#fff","--shiki-dark-bg":"#24292e"}},[i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"where cl")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1),N=i("p",null,[s("如果看到 "),i("code",null,"INFO: Could not find files for the given pattern(s)."),s("，说明编译器没有安装或者没有配置好环境变量。请参考第一章的内容，安装并配置好编译器。")],-1),O=i("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"--shiki-light":"#24292e","--shiki-dark":"#e1e4e8","--shiki-light-bg":"#fff","--shiki-dark-bg":"#24292e"}},[i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"which"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," g++")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1),S=i("p",null,"如果没有看到任何输出，说明编译器没有安装或者没有配置好环境变量。请参考第一章的内容，安装并配置好编译器。",-1),V=h(`<h2 id="main-函数" tabindex="-1"><a class="header-anchor" href="#main-函数"><span><code>main</code> 函数</span></a></h2><p>在 C++ 程序中，<code>main</code> 函数是程序的入口。程序从 <code>main</code> 函数开始执行。</p><p><code>main</code> 函数需要程序在源码内定义，且只能有一个。<code>main</code> 函数的定义形式有两种：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在这里写程序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在这里写程序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">char** 类型</p><p>参数 <code>argv</code> 的类型是 <code>char **</code>，这是一个指向字符指针的指针。这个参数是用来接收命令行参数的。 例如，前面提到的 <code>cd &lt;目录路径&gt;</code> 这样控制台命令，就是调用了一个名为 <code>cd</code> 的程序，并且传递了一个参数 <code>&lt;目录路径&gt;</code>。这个参数就是命令行参数，通过 <code>argv</code> 参数传递给程序。</p><p>关于命令行参数，以及 <code>char **</code> 类型，我们会在后面的章节中详细讲解。</p></div><p><code>main</code> 函数的返回值类型必须是 <code>int</code>，并且如果程序正常执行结束，应该返回 <code>0</code>。如果程序执行出现错误，可以返回其他的值，表示程序的错误状态。</p><p>C++ 标准规定，如果 <code>main</code> 函数执行到末尾，却没有提供返回值，其效果等同于 <code>return 0;</code>。也即是说，下面的两个程序是等价的：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>和</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们来写一个简单的控制台程序。在 <code>main.cpp</code> 文件中写入如下内容：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import std;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>std::println</code> 中的 <code>std</code> 是标准库命名空间，<code>println</code> 是 <code>std</code> 命名空间中的一个函数，它的作用是根据参数，输出一行文本，这里输出的是 <code>Hello, World!</code>。</p><p>接下来，我们来编译这个程序。</p>`,16),z=i("div",{class:"language-powershell line-numbers-mode","data-highlighter":"shiki","data-ext":"powershell","data-title":"powershell",style:{"--shiki-light":"#24292e","--shiki-dark":"#e1e4e8","--shiki-light-bg":"#fff","--shiki-dark-bg":"#24292e"}},[i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"g"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"++"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," main.cpp "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"-"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"o main")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1),G=i("p",null,[s("这里表示用 "),i("code",null,"g++"),s(" 编译 "),i("code",null,"main.cpp"),s(" 文件，生成一个名为 "),i("code",null,"main"),s(" 的可执行文件。")],-1),H=i("blockquote",null,[i("p",null,[s("这里 "),i("code",null,"g++"),s(" 是 "),i("code",null,"gcc"),s(" 编译器组件中处理 C++ 源文件的程序，参考前面介绍的 "),i("code",null,"int main(int argc, char** argv)"),s(" 结构，这里 "),i("code",null,"main.cpp"),s("、"),i("code",null,"-o"),s("、"),i("code",null,"main"),s(" 都是命令行参数，通过 "),i("code",null,"argv"),s(" 参数传入一个文件名为 "),i("code",null,"g++"),s(" 的程序。")])],-1),I=i("div",{class:"language-cmd line-numbers-mode","data-highlighter":"shiki","data-ext":"cmd","data-title":"cmd",style:{"--shiki-light":"#24292e","--shiki-dark":"#e1e4e8","--shiki-light-bg":"#fff","--shiki-dark-bg":"#24292e"}},[i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"cl main.cpp /Fe:main")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1),P=i("p",null,[s("这里表示用 "),i("code",null,"cl"),s(" 编译 "),i("code",null,"main.cpp"),s(" 文件，生成一个名为 "),i("code",null,"main.exe"),s(" 的可执行文件。")],-1),W=i("blockquote",null,[i("p",null,[s("这里 "),i("code",null,"cl"),s(" 是 Visual Studio 编译器组件中处理 C++ 源文件的程序，参考前面介绍的 "),i("code",null,"int main(int argc, char** argv)"),s(" 结构，这里 "),i("code",null,"main.cpp"),s("、"),i("code",null,"/Fe:"),s("、"),i("code",null,"main"),s(" 都是命令行参数，通过 "),i("code",null,"argv"),s(" 参数传入一个文件名为 "),i("code",null,"cl"),s(" 的程序。")])],-1),U=i("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"--shiki-light":"#24292e","--shiki-dark":"#e1e4e8","--shiki-light-bg":"#fff","--shiki-dark-bg":"#24292e"}},[i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"g++"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," main.cpp"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -o"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," main")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1),J=i("p",null,[s("这里表示用 "),i("code",null,"g++"),s(" 编译 "),i("code",null,"main.cpp"),s(" 文件，生成一个名为 "),i("code",null,"main"),s(" 的可执行文件。")],-1),R=i("blockquote",null,[i("p",null,[s("这里 "),i("code",null,"g++"),s(" 是 "),i("code",null,"gcc"),s(" 编译器组件中处理 C++ 源文件的程序，参考前面介绍的 "),i("code",null,"int main(int argc, char** argv)"),s(" 结构，这里 "),i("code",null,"main.cpp"),s("、"),i("code",null,"-o"),s("、"),i("code",null,"main"),s(" 都是命令行参数，通过 "),i("code",null,"argv"),s(" 参数传入一个文件名为 "),i("code",null,"g++"),s(" 的程序。")])],-1),$=i("p",null,"编译完成后，我们可以运行这个程序。",-1),j=i("div",{class:"language-powershell line-numbers-mode","data-highlighter":"shiki","data-ext":"powershell","data-title":"powershell",style:{"--shiki-light":"#24292e","--shiki-dark":"#e1e4e8","--shiki-light-bg":"#fff","--shiki-dark-bg":"#24292e"}},[i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".\\main")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1),K=i("div",{class:"language-cmd line-numbers-mode","data-highlighter":"shiki","data-ext":"cmd","data-title":"cmd",style:{"--shiki-light":"#24292e","--shiki-dark":"#e1e4e8","--shiki-light-bg":"#fff","--shiki-dark-bg":"#24292e"}},[i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"main.exe")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1),L=i("div",{class:"language-bash line-numbers-mode","data-highlighter":"shiki","data-ext":"bash","data-title":"bash",style:{"--shiki-light":"#24292e","--shiki-dark":"#e1e4e8","--shiki-light-bg":"#fff","--shiki-dark-bg":"#24292e"}},[i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"./main")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"})])],-1),M=h(`<p>应该会看到如下的输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Hello, World!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="输出值" tabindex="-1"><a class="header-anchor" href="#输出值"><span>输出值</span></a></h2><p>在上面的程序中，我们使用了 <code>std::println</code> 函数来输出文本。这个函数是标准库中的一个函数，用来输出文本到控制台。这个函数能够接受多个参数，将参数作为文本输出到控制台。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import std;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The value of a = {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个程序中，<code>std::println</code> 函数接受了两个参数，第一个参数是一个字符串，第二个参数是一个整数。<code>std::println</code> 函数会将第一个参数中的 <code>{}</code> 替换为第二个参数的值，然后输出到控制台。</p><p>如果 <code>std::println</code> 有更多的参数，那么第二个参数会对应替换到第一个 <code>{}</code>，第三个参数会对应替换到第二个 <code>{}</code>，以此类推。</p><div class="hint-container info"><p class="hint-container-title">{} 的作用</p><p>技术性地说 <code>{}</code> 是一个占位符，用来表示在这个位置输出一个参数。 这个占位符中可以包含格式化信息，例如 <code>{:h}</code> 表示输出十六进制整数，<code>{:b}</code> 表示输出二进制整数等。<code>{0:}</code>表示输出第一个参数，无论这个占位符是不是第一个出现的。</p><p>这个占位符的详细使用方法会在后续章节中介绍。</p></div><p>这个程序的输出应该是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>The value of a = 123</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在默认情况下，<code>int</code> 会被输出为十进制整数，<code>char</code> 会被输出为对应ACSII码的字符，<code>bool</code> 会被输出为 <code>true</code> 或 <code>false</code>。</p><p>现在，使用上之前实现的 <code>sqrt</code> 函数和循环语句，输出一些内容吧。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import std;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The square root of {} is {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面程序的输出应当是：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>The square root of 1 is 1</span></span>
<span class="line"><span>The square root of 2 is 1</span></span>
<span class="line"><span>The square root of 3 is 1</span></span>
<span class="line"><span>The square root of 4 is 2</span></span>
<span class="line"><span>The square root of 5 is 2</span></span>
<span class="line"><span>The square root of 6 is 2</span></span>
<span class="line"><span>The square root of 7 is 2</span></span>
<span class="line"><span>The square root of 8 is 2</span></span>
<span class="line"><span>The square root of 9 is 3</span></span>
<span class="line"><span>The square root of 10 is 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="输入字符" tabindex="-1"><a class="header-anchor" href="#输入字符"><span>输入字符</span></a></h2><div class="hint-container important"><p class="hint-container-title">TODO: 补充内容</p></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c, result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The input number is {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, result);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;9&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The input number is {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, result);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="输入多个整数并求和" tabindex="-1"><a class="header-anchor" href="#输入多个整数并求和"><span>输入多个整数并求和</span></a></h2><div class="hint-container important"><p class="hint-container-title">TODO: 补充内容</p></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;,&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;9&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function Q(X,Y){const n=k("Tabs");return p(),r("div",null,[g,u,E,o,t(n,{id:"12",data:[{id:"powershell"},{id:"cmd"},{id:"bash"}],active:0,"tab-id":"shell-type"},{title0:a(({value:l,isActive:e})=>[s("powershell")]),title1:a(({value:l,isActive:e})=>[s("cmd")]),title2:a(({value:l,isActive:e})=>[s("bash")]),tab0:a(({value:l,isActive:e})=>[v]),tab1:a(({value:l,isActive:e})=>[y]),tab2:a(({value:l,isActive:e})=>[b]),_:1}),m,F,A,t(n,{id:"32",data:[{id:"powershell"},{id:"cmd"},{id:"bash"}],active:0,"tab-id":"shell-type"},{title0:a(({value:l,isActive:e})=>[s("powershell")]),title1:a(({value:l,isActive:e})=>[s("cmd")]),title2:a(({value:l,isActive:e})=>[s("bash")]),tab0:a(({value:l,isActive:e})=>[f]),tab1:a(({value:l,isActive:e})=>[C]),tab2:a(({value:l,isActive:e})=>[_]),_:1}),D,B,x,t(n,{id:"265",data:[{id:"powershell"},{id:"cmd"},{id:"bash"}],active:0,"tab-id":"shell-type"},{title0:a(({value:l,isActive:e})=>[s("powershell")]),title1:a(({value:l,isActive:e})=>[s("cmd")]),title2:a(({value:l,isActive:e})=>[s("bash")]),tab0:a(({value:l,isActive:e})=>[w,q]),tab1:a(({value:l,isActive:e})=>[T,N]),tab2:a(({value:l,isActive:e})=>[O,S]),_:1}),V,t(n,{id:"328",data:[{id:"powershell"},{id:"cmd"},{id:"bash"}],active:0,"tab-id":"shell-type"},{title0:a(({value:l,isActive:e})=>[s("powershell")]),title1:a(({value:l,isActive:e})=>[s("cmd")]),title2:a(({value:l,isActive:e})=>[s("bash")]),tab0:a(({value:l,isActive:e})=>[z,G,H]),tab1:a(({value:l,isActive:e})=>[I,P,W]),tab2:a(({value:l,isActive:e})=>[U,J,R]),_:1}),$,t(n,{id:"366",data:[{id:"powershell"},{id:"cmd"},{id:"bash"}],active:0,"tab-id":"shell-type"},{title0:a(({value:l,isActive:e})=>[s("powershell")]),title1:a(({value:l,isActive:e})=>[s("cmd")]),title2:a(({value:l,isActive:e})=>[s("bash")]),tab0:a(({value:l,isActive:e})=>[j]),tab1:a(({value:l,isActive:e})=>[K]),tab2:a(({value:l,isActive:e})=>[L]),_:1}),M])}const si=d(c,[["render",Q],["__file","cli-program.html.vue"]]),ai=JSON.parse('{"path":"/zh/02-program-structure/cli-program.html","title":"2.7 简单的控制台程序","lang":"zh-CN","frontmatter":{"title":"2.7 简单的控制台程序"},"headers":[{"level":2,"title":"控制台操作概述","slug":"控制台操作概述","link":"#控制台操作概述","children":[]},{"level":2,"title":"main 函数","slug":"main-函数","link":"#main-函数","children":[]},{"level":2,"title":"输出值","slug":"输出值","link":"#输出值","children":[]},{"level":2,"title":"输入字符","slug":"输入字符","link":"#输入字符","children":[]},{"level":2,"title":"输入多个整数并求和","slug":"输入多个整数并求和","link":"#输入多个整数并求和","children":[]}],"git":{"createdTime":1719858648000,"updatedTime":1721285883000,"contributors":[{"name":"dynilath","email":"dynilath@qq.com","commits":6}]},"readingTime":{"minutes":7.29,"words":2187},"filePathRelative":"zh/02-program-structure/cli-program.md","localizedDate":"2024年7月1日"}');export{si as comp,ai as data};
