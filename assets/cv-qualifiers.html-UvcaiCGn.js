import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as h,c as n,d as s,e as i,a as d,w as k,b as e}from"./app-DNTRvR-x.js";const p={},r=e(`<p>在 C++ 中，有两个类型限定符，<code>const</code> 和 <code>volatile</code>，它们可以被用来对类型做出修饰限定，并成为限定的对象类型的一部分。这两个限定符可以被用于任何类型。</p><p>限定符的使用方式如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // a 的类型是 const int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // b 的类型是 volatile int</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>限定符和类型的顺序没有限制。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // a 的类型是 const int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> volatile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // b 的类型是 volatile int</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>两种限定符可以同时使用，例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // c 的类型是 const volatile int</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>限定符必须和类型一起使用，不能单独使用。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code"><code><span class="line highlighted error"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误，缺少类型</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="const-限定符" tabindex="-1"><a class="header-anchor" href="#const-限定符"><span>const 限定符</span></a></h2><p><code>const</code> 限定的类型的对象不能被修改。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line highlighted error"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误，a 是 const 类型，不能被修改</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，只要不修改 <code>const</code> 限定的对象，可以在任何表达式里使用这个对象。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // b 被初始化为 20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,14),c=s("code",null,"int",-1),o=s("code",null,"const int",-1),g=e(`<p>于是，C++ 规定，<code>const</code> 限定的对象必顺提供初始化器，否则会导致编译错误。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code"><code><span class="line highlighted error"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误，缺少初始化器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过 <code>auto</code> 从 <code>const</code> 限定的对象中推导类型时，<code>auto</code> 会忽略 <code>const</code> 限定符。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // d 的类型是 int，而不是 const int</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以给 <code>auto</code> 额外添加 <code>const</code> 限定符，以推导出有 <code>const</code> 限定的对象。例如：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;"><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // f 的类型是 const int</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">常量和变量</p><p>因为 <code>const</code> 带来的不能被修改的性质，类型有 <code>const</code> 限定的对象往往被称为常量。相对地，没有被 <code>const</code> 限定的对象往往被称为变量。但技术性地说，<code>const</code> 限定的对象也是变量，只是不能被修改。当看到一个对象声明为 <code>const int a = 1;</code> 时，我们可以说 <code>a</code> 是一个常量，也可以说 <code>a</code> 是一个变量，或者说 <code>a</code> 是一个常变量，这都是正确的，这些说法并不冲突。</p></div><h2 id="volatile-限定符" tabindex="-1"><a class="header-anchor" href="#volatile-限定符"><span>volatile 限定符</span></a></h2><p>对于 <code>volatile</code> 限定的类型的对象，编译器认为其值可能在任何时候被修改。具体而言，类型有 <code>volatile</code> 限定的对象的读写都被视作有副作用（普通的对象只有写视为副作用），因此当访问 <code>volatile</code> 限定的对象值时，程序总是会从对象的内存位置得到值，而不能简化。</p><p>这个限定符通常用于硬件编程场景。典型情况例如：</p><ul><li>在电路板级别的开发中，经常会将传感器等设备的输出数据映射到内存中——例如某个内存区域是测量的电压值转换来的。此时，数据的值可能会在任何时候被修改。这时，就需要使用 <code>volatile</code> 限定符来声明这些数据。</li><li>在单片机开发中，常常需要利用处理器提供的硬中断机制来处理外部事件（例如按下按键）。这种中断事件中被修改的对象就需要使用 <code>volatile</code> 限定符。</li><li>除了上面的处理器提供的硬中断机制以外，操作系统常常也会提供软中断。软中断的处理函数也可能会修改数据，这时需要使用 <code>volatile</code> 限定符。</li></ul><p>上面提到的这些情况的应用需要一些目前尚未介绍的知识，这里是为了介绍 <code>volatile</code> 限定符，帮助读者对此有一些基本概念。</p><div class="hint-container info"><p class="hint-container-title">volatile 与多线程</p><p>在编程漫长的发展中，各种多线程技术涌现又被淘汰，程序员们对 <code>volatile</code> 的理解逐渐产生了一种奇妙的差异。在 <code>x86</code> 架构下，对一些足够小且满足对齐的对象，添加 <code>volatile</code> 就可以令这样的对象得到一定程度上的多线程保证。而在 <code>java</code> 中，<code>volatile</code> 则直接写明了用来保证多线程之间的可见性。由于这两个语境广泛地出现在各种编程交流中，程序员们便逐渐开始将 <code>volatile</code> 与多线程直接联系起来。</p><p>实际上，C/C++ 中的 <code>volatile</code> 本身不具有多线程的语义，这要等到我们介绍 C++ 的多线程机制时再详细讨论。在这里，读者只需要记住，使用 <code>volatile</code> 来进行多线程编程是不足够的。</p></div>`,13);function E(v,y){const a=l("RouteLink");return h(),n("div",null,[r,s("p",null,[i("前面介绍"),d(a,{to:"/zh/02-program-structure/declaration.html"},{default:k(()=>[i("声明")]),_:1}),i("的部分中提到过，"),c,i(" 这样的对象，如果声明时没有提供初始化器，那么这个对象的值是不确定的，但是之后可以修改这个对象的值。而 "),o,i(" 类型的对象，声明后就无法被修改了。")]),g])}const m=t(p,[["render",E],["__file","cv-qualifiers.html.vue"]]),F=JSON.parse('{"path":"/zh/03-types/cv-qualifiers.html","title":"3.3 const 与 volatile 限定符","lang":"zh-CN","frontmatter":{"title":"3.3 const 与 volatile 限定符"},"headers":[{"level":2,"title":"const 限定符","slug":"const-限定符","link":"#const-限定符","children":[]},{"level":2,"title":"volatile 限定符","slug":"volatile-限定符","link":"#volatile-限定符","children":[]}],"git":{"createdTime":1721588143000,"updatedTime":1721591907000,"contributors":[{"name":"dynilath","email":"dynilath@qq.com","commits":2}]},"readingTime":{"minutes":4.14,"words":1243},"filePathRelative":"zh/03-types/cv-qualifiers.md","localizedDate":"2024年7月21日"}');export{m as comp,F as data};
